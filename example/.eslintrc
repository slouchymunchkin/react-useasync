{
  "parser": "@typescript-eslint/parser",
  "extends": ["react-app", "eslint:recommended"],
  "plugins": ["simple-import-sort", "import", "prettier", "unused-imports", "only-warn"],
  "rules": {
    "react/jsx-fragments": ["warn", "syntax"], // (Fixable) Enforce shorthand syntax for React fragments "<></>"
    "react/no-this-in-sfc": "error", // Disallow usage of "this" in functional component.
    "react/self-closing-comp": ["warn", { "component": true, "html": true }], // (Fixable) React and html components without children must be self-closed to avoid unnecessary extra closing tag.
    "react/jsx-curly-brace-presence": ["warn", "never"], // (Fixable) Disallow unnecessary curly braces in JSX props and/or children.
    "react/jsx-boolean-value": ["warn", "never"], // (Fixable) Enforce boolean attributes notation: "open" instead of "open={true}"
    "react/jsx-no-useless-fragment": "off", // (Fixable) Disallow unnecessary fragments
    "react/jsx-key": "warn", // Enforce key-prop on jsx arrays
    "react/void-dom-elements-no-children": "warn",
    "react/jsx-pascal-case": "warn", // Enforce pascal case naming convention for JSX components
    "react/no-unescaped-entities": "error", // Disallow/forbid certain unnecessary characters that can lead to errors on comps
    "react/no-unknown-property": "warn", // Enforce camelCased naming convetion for DOM props
    "react/jsx-no-comment-textnodes": "warn",
    "react/jsx-no-bind": [
      "warn",
      {
        "allowArrowFunctions": true
      }
    ],
    // Only allow type="button" on button
    "react/button-has-type": [
      "error",
      {
        "button": true,
        "submit": false,
        "reset": false
      }
    ],
    // (Fixable)
    "react/jsx-sort-props": [
      "warn",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "ignoreCase": true,
        "reservedFirst": true
      }
    ],
    "react-hooks/exhaustive-deps": "off",
    "require-await": "warn",
    "no-console": "warn",
    "no-useless-constructor": "warn",
    "no-await-in-loop": "warn", // Disallow await operations in a loop. Use promise.all instead
    "no-template-curly-in-string": "error", // Disallow when a regular string contains what looks like a template literal placeholder
    "curly": "warn", // (Fixable) Disallow the omission of curly braces when a block contains only one statement.
    "no-else-return": ["warn", { "allowElseIf": true }],
    "no-extra-boolean-cast": "warn", // (Fixable)
    "sort-imports": "off", // Turned off in favor of using "eslint-plugin-import"
    "@typescript-eslint/no-unused-vars": "off", // Turned off in favor of using "eslint-plugin-unused-imports"
    "no-unused-vars": "off",
    "unused-imports/no-unused-imports-ts": "off", // (Fixable) Disallow unused imports
    "unused-imports/no-unused-vars-ts": "warn", // Disallow unused variables
    "import/order": "off",
    "import/first": "warn", // (Fixable)
    "import/newline-after-import": "warn", // (Fixable)
    "import/no-duplicates": "warn", // (Fixable)
    "simple-import-sort/sort": [
      "warn",
      {
        "groups": [
          // Node.js builtins. You could also generate this regex if you use a `.js` config.
          // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
          [
            "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
          ],
          // Packages. `react` related packages come first.
          ["^react", "^@?\\w"],
          // Internal packages.
          ["^(@|@company|@ui|components|utils|config|api|css|images|vendored-lib)(/.*|$)"],
          // Side effect imports.
          ["^\\u0000"],
          // Parent imports. Put `..` last.
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
          // Other relative imports. Put same-folder imports and `.` last.
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
          // Style imports.
          ["^.+\\.s?css$"]
        ]
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "node": {
        "moduleDirectory": ["node_modules", "src/"]
      }
    }
  },
  "ignorePatterns": ["coverage/", "node_modules/", "src/serviceWorker.ts"]
}
